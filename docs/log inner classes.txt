1.ok. For now we implemented a comprehensive suite of tests, implementation-agnostic.
2.ok. Configuration. We need at least two cells:
  - <enclosingClass> - knows who is the enclosing class of a given class. Alteady exists.
  - <enclosingObj> - the location of the enclosing object, at runtime.

  Most of the preprocessing should happen at elaboration time. We need to implement the following:

3.ok. Support for qualified new constructs.
  obj.new Class() should add the relevant value in the <enclosingObj> cell.
4.ok. Desugar all "this" qualifiers into Class.this
5.ok. Support for resolving instance fields/methods from enclosing instance.
  Each such reference should be desugared into Class.this.name.
6.ok. Instantiation of inner classes without qualifier. Qualifier is properly inferred.
7.ok. Prepare the ground for implementing the call to qualified superclass constructor.
  Here we need some refactoring.
  Right now <enclosingObj> is associated to a whole object. It should be associated with
  each object stack layer. This way base class could have a different enclosing object
  than the derived class.
8.ok. Add support for:
  - QSuperConstrInv - a.super(...)

9.ok. Maintain the compatibility with static inner classes when converting 'NewInstance to 'QNewInstance.

10.ok. Correctly resolve classes in qualified new expressions like: a.new B();
  B could be defined not in compile-time type of a, but in one of its superclasses.

11.ok. Correctly resolve the qualifier of superclass constructor invocations, where
  the correct qualifier is not the immediate enclosing class. Three-level hierarchy in action.

12.ok. Add support for:
  - QSuperField - A.super.f
  - QSuperMethod - A.super.m()

13.ok. Add tests that distinguish between static and instance inner classes. When searching for an enclosing
  object, the fact that inner class is static or instance should make a difference.

  Who may have what:
  - static inner classes may have any type of inner classes.
  - instance inner classes cannot have static members, neither static inner classes or interfaces.
  - interfaces may only have public static inner members (including other interfaces).

14.ok. There's nothing new to implement to make tests at p.13 to work. Everything works already.
15. Re-implement the link between an inner class and its enclosing class not as new runtime semantics but as a field.
