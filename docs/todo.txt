Plan for future development:

1.ok. String +=
2.ok. Object methods.
  Package names used in getClass(). (and as a result in toString())
  Remove reference to core class packages in semantics.
3.ok. Reference operators.
4.ok. Basic exceptions.
5. Arrays.
7. Method/constructor overloading.
8. Class list cleanup.
9.ok. krun preprocessor.
10. Test runner improvements.

Details.
1.ok. String +=
  All seems to work.

2.ok. Object methods:
  Test plan is in 34_java_api_core.

3.ok. Reference operators.
  All operators: =, ==, !=, cast, instanceof
  Test plan is in ref_operators dir.
  With this operators implemented, conversions and promotions for reference types
  are completely implemented.

4.ok. Basic Exceptions.
  JLS $5.6 is the best reference.
  ArithmeticException, NullPointerException, ClassCastException.
  Similarly to step 3 we need to test NPE and ClassCastException when dealing with a reference
  of type object, and a value of type object, string, array, userClass.
  This will be tested in the test suite for exception.

5. Arrays.
  Important: there are some nuances regarding array access expression
  and compound assignment. I suppose similar "particularities" are hidded beyond other
  expressions in interaction with arrays.

5.2 JLS Compound assignment example.
  The example from JLS, chapter compound assignment, without floating-point numbers.
  Delayed to this moment because we need JVM exceptions related to arrays.
  Now it should work.

7. Method/constructor overloading.

8. Class list cleanup.
  At the end of program execution, classes which were not used
  in the program will be deleted from configuration. Thus, final configuration will be kept small
  and easy analizable.

9.ok. K java preprocessor.

1.ok. First version: instead of including core classes into the java semantics, they will be
  stored as kast files. Before a program run, a preprocessor will assemble
  those core classes with parser result of the input file into one big kast file,
  which will be considered parsing output. Thus core classes will be included in each program, not in
  the java semantics itself. In this version core classes will be hardcoded in the preprocessor.
2.ok. Improve the preprocessor to recursively parse the class-lib directory
  and to include all the .kast files within. Now we don't need to hardcode the .kast files.
3.ok. Now search for .java files in class-lib and parse them all into .kast files before assembling.
4.ok. Implement cached class lib parsing - parse .kast files only if they don't exist or if .java file
  is newer than the associated .kast file. Since neither kast format or java syntax are expected to
  change, this caching should be safe.


10. Test runner improvements
1.ok. Write a report at the end of test-runner run:
  number of tests passed, error, failed, total.
2.ok. Don't delete any files during test-runner execution. The directory
  where they are located is not accessed anyway.
3.ok. Don't delete .temp dir before running the suite, by default.
  add an option -clean trye/false, to delete it.
  When we select not to delete the directory, any temp files created
  will be written over. This should not affect any existing behavior.
4.ok. Run generator for a test only if .java file or .in file
  is newer than generated .out file. Thus generator in most cases will not
  be run.
  4.1.ok Run generator if .out file is present in the temp dir
  4.2.ok Check that smart gen is run iff either .java or .in is newer than .out.
5.ok. Reuse parsing results. Write parse results in a file and feed the file to krun,
instead of running it directly. Run parser again only if .java file
has changed since last run.
6.ok. add -clean option to kjtest.sh
7. Write two report files in the .temp dir: list of error tests,
  and list of failed tests.
8. Createa a new script: kjf-run , which will run the first failed test, taken from file
.failed-list.txt, created at step 6. Thus we'll not need anymore
to specify the name of the test. Since the script will use improved kjrun,
configuration will be written both on console and in a file.
9. Improve kjrun so that it displays formatted configuration to the console, and
uncolored one to a file. This may involve creating a temp dir somwhere in .test,
and running krun twice in paralel: one for eah configuration.

todo - report to oracle the bug related to array<object>[i]+= string.
todo - problem in K. Strictness is not applied in the following case:
syntax KLabel ::= | 'Mul [seqstrict]
- check java definition to see if there is any syntax affected

