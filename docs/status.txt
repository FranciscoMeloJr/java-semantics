List of implemented features:

1. Migrated kool semantics to java syntax.
2. Support for all literals, all types and formats (JLS $3),
    with the following exceptions only:
  - floating point types are not supported
  - escape chars with values beyond 127, in both char and string literals.
  (those are not supported by maude)
3. Support for all primitive integer types. Overflow and explicit conversion. (JLS $4)
4. Support for all kinds of conversions and promotions for integers and references. (JLS $5)
5. Full support for operators. Including primitive type operators, reference operators
  and composite addignment.
6. All statements which deal with single-threaded computation
  (e.g. except synchronized), (JLS $14).
7. Full support for arrays, as per JLS $10, $15.10, $15.13.
8. Basic exceptions: ArithmeticException, NullPointerException, ClassCastException.
9. Support for the following JDK methods's:
  - System.out.print
  - System.out.println
  - Integer.parseInt(System.console().readLine()) - only this term, and no subparts of it.
(The bare minimum required to write any values to console, or to read integers.)
  - object.getClass().getName() (used by Exception.toString())
10. Constructors, simplified semantics. Constructors are just replaced
with methods with same name and return type void.
11. Superclass constructor invocation during new object creation.
12. Default constructor.
13. Method and constructor overloading.
14. Runtime semantics of method access modes. Since our semantics does all compile-time
  preprocessing at runtime, access modes have a runtime semantics just in some peculiar cases,
  particularly in context of overwriting and overloading. See the test plan
  in the directory 43_method_access_mode for details.
15. Classes, non-static members, object initialization.
16. Abstract classes/methods.
17. Interfaces (just methods).
  With this one, non-static semantics for classes and interfaces is complete.

Major features yet to be implemented:
1. Static members, including interface fields.
2. Packages.
3. Inner classes (including nested, local and anonymous classes).


Limitations:

1. K syntax limitation:
A production cannot have a non-terminal of sort List{K} and another
non-terminal of sort some List, surrounded by terminals.

Solution: make the sort "some list" to have a non-terminal on just one side.
Should be reported as a bug.

Non-related to java semantics:
1. Investigated various java language test suites over the net.
  So far, the most adequate for this project is jacks/tests/runtime/jls,
  part of mauve.


Postponed features:
1. After NPE will be implemented, all seqstrict constructs should be reviewed.
  Some of them should throw NPE immediatley after first argument evaluates to null,
  thus second argument should not be evaluated.
2. Test all numeric promotions after we'll implement method overloading.
  Overloading is the only feature capable to distinguish between byte, short, int
  with the same value. Test for conditional operator now passes, although
  I have no logic implemented specifically for it.
  I cannot implement a test even for char promotion.

