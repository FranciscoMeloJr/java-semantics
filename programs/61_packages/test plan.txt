Test suite for packages and import declarations.High level test plan:  1. Fully qualified class names.  2. Simple class name references in:    - local package, same compilation unit    - local package, different compilation units    - the unnamed package    - package java.lang  3. Single type import.  4. Type import on demand.  5. Types resolution and references in various expression cathegories.  6. Class access modes.Tests:11. One simple package pack. Two classes inside. Refer both with the fully qualified name.12. Two simple packages pack1 and pack2. One class inside each, with different names. Refer both  through fully-qualified class name.13. Two simple packages pack1 and pack2. Two classes with the same simple name, one in each package.  Refer both through fully-qualified names.14. Nested packages. Packages pack, pack.p1, pack.p2, pack.p1.p11 A different class in each package,  with the same name. Test all of them through fully-qualified class name from main.21. Two classes pack.A and pack.B in the same compilation unit.  Test both from pack.Test (separate CU), by simple name.22. Two classes pack.A and pack.B in different compilation units.  Test both from pack.Test (separate CU), by simple name.23. Packages pack, pack.pbb, pack.pcc. Each have a class A and Test. From each class Test  check the simple name A and all the fully-qualified class names.24. Main and two classes A and B are in the default package. The same classes are in the package pack.  Test all four of them from Main.25. Main and two classes A and B are in the default package. The same classes are in the package pack.  Test the classes from package pack, by simple name, from another class in pack.26. Package java.lang have the classes Object and RuntimeException. Add a package pack  with classes Object and RuntimeException. Test both classes unqualified,  qualified with "java.lang", and qualified  with "pack." from Main (default package), and from a class Test inside another package pack2.31. Single type import simple. Class Main, p1.A. Import p1.A from Main. Test it by simple name.32. Single type import.  Classes Main, pt.Test, p.pb.A, p.pc.A. Import p.pb.A from Main and p.pc.A  from pd.Test. Test the simple name "A" from the classes Main and Test.33. Multiple single-type imports.  Classes Main, Test, p.pb.A, p.pb.B, p.pb.Test, p.pc.A, p.pc.B.  From Main import p.pb.A and p.pc.B. From Test import p.pc.A and p.pb.B.  Test the simple name "A" and "B" from the classes Main, Test and p.pb.Test.34. Single type import in a compilation unit with multiple classes.  Classes Main, Test in the same CU, pt.Test1, pt.Test2 in the same CU.  Also classes p.pb.A, p.pc.A. Import p.pb.A from CU (Main,Test) and p.pc.A from pt.(Test1,Test2).  Test simple name A from Main and the three test classes.35. Multiple single-type imports and local classes.  Classes Main, pt.Test, pt.B, pa.A, pa.B, pa.C. Import pa.A and pa.C from pt.Test. Test  simple names A,B,C in pt.Test.41. Type import on demand simple. Class Main, p1.A, p1.B import p1.* from Main. Test simple names A, B.42. Type import on demand.  Classes Main, pt.Test, p1.A, p1.B, p2.A, p2.B Import p1.* from Main and p2.* from pt.Test.  Test the simple names A and B from the classes Main and pt.Test.43. Multiple type imports on demand.  Classes Main, pt.Test, pa1.A, pa2.A, pb1.B, pb1.C, pb2.B, pb2.C From Main import  pa1.* and pb2.*. From pt.Test import pa2.* and pb1.*.  Test the simple name "A", "B" and "C" from the classes Main and pt.Test. Also "C" from pt.Test.44. Type import on demand in a compilation unit with multiple classes.  Classes Main, Test in the same CU, pt.Test1, pt.Test2 in the same CU.  Also classes pa1.A, pa2.A. Import pa1.* from CU Main and pa2.* from pd.Test1.  Test simple name A from Main and the three test classes.45. Multiple imports on demand and local classes.  Classes Main, pt.Test, pt.B, pa.A, pb.B, pc.C. Import pa.* and pc.* from pt.Test. Test  simple names A,B,C in pt.Test.46. Single-type imports and type import on demand mix. No name collisions.  Classes p1.A, p1.B, p1.C, p2.B, p2.C, p3.C.  From Main import: p1.A, p3.*, p2.B. Test A,B,C from Main.51. Testing instantiation, static method access, static field read and static field write  through fully-qualified class reference.  Classes Main, pack.A. Class pack.A have a traced constructor, static method f() and static field v.  Test new pack.A(), pack.A.f(), pack.A.a, pack.A.a = x from Main.52. Testing instantiation, static method access and static field access from all possible  package-resolution modes.  class Main. Target classes A, pb.B, pb.C, pc.C, pd.A, pd.C.  All of them contain a traced constructor, a static method f() and a field v.  class Main imports pb.B and pc.*. Test constructor, method call and field read through qualifiers:    - A    - B    - C    - pd.A,    - pd.C53. Class resolution in class extends/implements.  Classes pa.A, pb.A, interfaces pa.I1, pb.I1.  Class Test1 imports pa.A, pb.I, extends A implements I.  Class Test2 (same CU) extends pb.A implements pa.I.  Test the access to some traced static fields.54. Class resolution in interface extends.  Interfaces pa.I1, pb.I1.  Main CU imports pa.I1.  Interface I2 (same CU) extends I1.  Interface I3 (same CU) extends pb.I1.  Test the access to some traced static fields.55. Class resolution in variable types / method return types.  Classes p1.A, p2.A.  Main CU imports p2.A.  Mai contains:    - local var A,    - local var p1.A    - field A    - field p1.A    - method f with argument argument A    - method f with argument argument p1.A      (use those to test local vars and fields by overloading)    - method with return type A    - method with return type p1.A56. Class resolution in array variables / array instantiation.  Classes p1.A, p2.A.  Main CU imports p2.A.  Mai contains:    - local var A[] = new A[]    - local var p1.A[] p1a1 = new pa.A[]    - local var p1.A p1a2[] = new pa.A[]    - local var p1.A[] p1a3 = {...}57. Class resolution in instanceof.  Classes pa.A, pb.A. Main CU imports pb.A.  - Object o1 = new A  - Object o2 = new pa.A  - Test instanceof of both objects to A, pa.A, pb.A.58. Class resolution in cast.  Classes pa.A, pb.A. Main CU imports pb.A.  - Object o1 = new A  - Object o2 = new pa.A  - Test cast of both objects to A, pa.A, pb.A.61. Class access modes. Packages pack1, pack2. Classes:  - Main  - public p1.A  - package p1.B  - package p2.A  - package p2.B  Access simple names A and B from Main.test(), p1.A.test() and p2.B.test().