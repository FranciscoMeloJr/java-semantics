    Test plan for static members

  Part 2. Static fields

101. Static field, accesed though class qualified expression for read/write.
102. Static field, accessed through unqualified expression in static methods,
  for read/write.
103. Two static and two instance fields in the same class, all accessed unqualified.
104. Static field as instance counter.
  Class have one static and one instance field. Create three instances.
  Check that static field is the same, instance field is different.

105. Static field lookup, all the forms:
  We have 6 possible expressions:
    - unqualified f in static context
    - unqualified f in instance context
    - this.f
    - object.f
    - Class.f
    - super.f
  combined by two target contexts:
    - field in current class
    - field inherited from superclass.

106. Static field hiding:
  We have 6 modes to access a static field:
    - unqualified f in static context
    - unqualified f in instance context
    - this.f
    - object.f
    - Class.f
    - super.f
  We have three hiding scenarios involving static fields:
    - static hides static field
    - static hides instance
    - instance hides static
  We should test every combination that passes static checking.

107. Fields do not participate in polymorphism. (neither static nor instance)
  B < A, four hidding scenarios:
  static - static, static - instance, instance - static, instance - instance.
  Call all four through (A)B ref. Fields from A should be called.

108. Unqualified static fields in instance initializing contexts.
  Access a static field through unqualified expression in:
  - instance field initializer
  - instance initializer
  - super() call
  - constructor

109. Local var hiding a static field. Class with a static field, method with a local var
  with the same name. Access both from within and outside var scope. Also use this.field.

110. Static field default values. Class with static fields of all relevant types,
  without initializer. Test their value.

