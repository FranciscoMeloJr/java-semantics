Interfaces with static final fields.

todo:

Part 1. Access to an interface field may be done in the following ways:
  11. Through the defining interface.
  12. Through a subinterface.
  13. Through a class implementing directly the defined interface.
  14. Through a class extending a class implementing the defining interface.
  15. Through a class implementing indirectly the defining interface.
    Test all cases with all possible expressions.

  16. Interface fields having modifiers:
    - public static final
    - final static public
    - public
    - static
    - final
    - (none)

Part 2. Fields hiding involving an interface:
  21. I2{v} < I1{v}
  22. I3 < I2{v} < I1{v}
  23.  A < I2{v} < I1{v}
  24. A{v} < I1{v}
  25. B < A{v} < I1{v}
    Test using unqualified (where possible) and class-qualified expression.

Part 3. Multiple inheritance, no ambiguities.
  31. I3{d} < I2{c}, I1{a,b} - access all through class qualifiers.
  32. A{c} < I2{b}, I1{a} - access all through class qualifiers and unqualified in A,
    static and dynamic context.
  33. Multiple interface inheritance with indirect multi-hiding.
    I4 < I3{v} < (I2{v}, I1{v}) - I3.v hides both I1.v and I2.v
    Test using interface-qualified expression.

  34. White-box test. An interface field hides fields in one or more superinterfaces.
    Access the visible field via subinterface or subclass.
    Suppose that interface field resolving algorithm takes the set <implTrans>
    of implemented interfaces of the target class, and checks the presence of the field in them in the
    order in which they were added to the set.
    Can we desigh a test such that this behavior would be wrong, and we would need a list with strict
      order of implemented interface checking?
    This problem don't appear in field hiding inside class, because the collection of superclasses is
      always a list. We have the problem with interfaces, because of multiple inheritance.
    The only way to conceive this test is to have the "master itnerface" - the one with the field
      hiding other fields, indirectly implemented, with as many child interfaces as possible,
      and child interfaces should have names lexicographically both befor and after the master
      interface. Something like:

      IA < (I1, I5, I9); I5 < I6; I6{v} < (I3, I7) I3{v} < (I2{v}, I4{v}), I7{v} < (I4{v}, I8{v})
      Access IA.v, I5.v, I6.v.

Part 4. Multiple-inherited field.
  The following cases:
  41. I4 < I3, I2 < I1{v}
  42. B < (A, I2) < I1{v}
  untested cases:
    - I3 < (I2, I1), I2 < I1{v}
    - B < (A, I1), A < I1{v}
  We will test unqualified and class-qualified exp.

Part 5. Ambiguously inherited fields:
  51. A < I3 < I2{v}, I1{v}
  52. B < A{v}, I1{v}
  Test the cases by object-qualified expression. Actual object of most derived type.

Part 6. Resolution of ambiguously inherited fields through super:
  61. B < A{v}, I1{v}
  62. B < (A, I2{v}), A < I1{v}
  Test both cases calling super.f in B.

Part 7. Field initializers, no hierarchy.
  Same capabilities as for static field initializers in classes,
  except that an interface field cannot be part of an composite-assignment expression with forward
  reference:

71. Fileds with initializer, all initialized with a constant expression.
  (adapt from static field init 101)
72. Fields with initializer, some initializer exps refer to fields declared above.
  (adapt from static field init 102)
73. Fields with initializer, initializer exps refer to fields declared below. Default values exposed.
  (adapt from static field init 103)
74. Fields with initializer, forward reference, default values for all types tested.
  (adapt from static field init 104)
75. Fields with initializer throwing an exception. Test that all the remaining initializers
  are not executed. Catch StaticInitializationError in main.
  (adapt from static field init 107)
76. Multifield with init, also methods. Two groups of fields:
  static int a=...;
  static int b=..., c=...;
  Test their values. Do not implement the interface. We are interested only in preprocessing.
  All field iniitalizers have tracing.

Part 8. Field initializers, hierarchy:

81. I2 < I1. Fields with initializer, refering to superclass static fields
  by simple name. Test that superclass fields are initialized.
82. Hierarchy of type I3 < (I1,I2). Interfaces all with fields with initializer,
  Fields in I3 refer to I2 then I1 by simple name.
  All initializers print a message. Test that the order is correct.
83. Hierarchy type A < I1. A class init accesses fields in I1 unqualified.
  static sequence in A: {trace} {access to I1} {trace}. Static sequence of I1 is also traced.

Part 9. Other tests, arised during implementation.

91. Testing various array constructs as interface fields.
  This test checks taht interface field desugaring is done properly.
  Array fields with array initializer in the most complex fashion:
  Combination of multi field declaration, field with [] in declarator, array initializer.

