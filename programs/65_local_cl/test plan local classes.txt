  Part 1. Local classes and the immediate enclosing class.

11. A simple local class LB that extends a class A and prints something in the toString().
12. A local class LB that overwrites a method of the base class A.
13. A local class LB that overwrites a method test() in the base class A. Also have an own method and field,
  accessed by test().
14. A local class LB implementing an interface with method test(). Also have an own method and field,
  accessed by test().
15. Local class LB accessing fields and methods of the enclosing class by simple name.
16. Local class LB caling a superclass constructor with parameters.
17. Local class and hiding.
  - Class O, members: av, af(), bv, bf(), test(),
  - Class O.test().LA, members: av, af(), test().
  From LA.test() call av, af(), bv, bf(), this.av(, this.af(), LA.this.av, LA.this.af(), O.this.av, O.this.af().

  Part 2. Local class whose base class is inner, but not instance inner.

21. Base class is a static inner class, traced constructor with no args.
22. Base class is a local class in a static method, traced constructor with no args.
23. Base class is a local class in a static initializer, traced constructor with no args.

  Part 3. Local class with base class an inner or local class.

31. Base class is inner class from another lexical hierarchy, have a traced constructor with no arguments.
  Local class LB have a constructor with one argument - the qualifier of the base class.
  Local class's test() calls super.test() that prints something from its enclosing class.

32. Base class is inner class from another lexical hierarchy, have traced a constructor with two arguments.
  Local class have a constructor with three arguments - one for qualifier, two for the base class args.
  Local class's test() calls super.test() that prints something from its enclosing class.

33. Base class LA is a local class in instance context, have traced a constructor with two arguments.
  Local class LB have two constructors:
    - constructor with two arguments - two for the base class args. Calls unqualified superclass constructor.
    - constructor with three arguments - one for qualifier, two for the base class args.
      Calls qualified superclass constructor.
  Local class's test() calls super.test() that prints something from its enclosing class.
  Instantiate 3 LB's:
    - using two-args constructor
    - using three-args constructor, base encloser O.this
    - using three-args constructor, base encloser new O(...)

34. Local class LB extending another local class and implementing a global interface.
  (Local interfaces are not allowed.) Testing polymorphism through casting the object
  to the class and to the interface and calling a relevant method.

  Part 4. Local class and the enclosing block.

41. Local class accessing local vars of the enclosing class defined in one single block.
42. Local class accessing local vars of the enclosing class defined in nested blocks.
43. Local class accessing a local var that shadows a field of the enclosing class.
44. Local class LA accessing a field of the enclosing class, that will be shadowed by a local var of the
  enclosing class after the body of LA.
45. Local class LA accessing a field of the enclosing class, that was shadowed by a local var of the
  enclosing class before the body of LA, but whose scope is over.
46. Local class accessing its own field, that shadows a local var of the enclosing block.

  Part 5. Three-level nesting.

51. Local class inside an inner class inside a top-level class. Accessing fields and methods of inner
  and top-level by simple name.
52. Local class inside an inner class inside a top-level class. Field and method with the same name
  in Outer, Mid and Local. Discriminate among them using this, Mid.this, Outer.this.
53. Three-level local nesting. Local class LA extending I1Factory. Inside it, local class ILB extending I1.
  Access final local vars from ILB.f(), LA.createI1() and O.createILB() by simple name.
54. Three-level local nesting. Local class LA extending I1Factory. Inside it, local class ILB extending I1.
  Inside O.createILB(): local vars a,b,c. Inside LA.createI1(): local vars a,b. Inside ILB.f()
  - local var a. Print a,b,c from ILB.f().
55. Local class, inside static method, inside a static inner class,
  inside a top-level class. Class members:
  - O: af(), av, bf(), bv, cf(), cv, test().
  - Mid: af(), av, bf(), bv, test()
  - ILB: af(), av, test().
  All members are static, exept those of ILB.
  Since all local classes are inner classes, they cannot have static methods.
  Access them by simple name from ILB.test(). Also discriminate using class qualifier.

56. Local class, inside instance method, inside another inner class,
  inside a top-level class. Class members:
  - O: af(), av, bf(), bv, cf(), cv.
  - Mid: af(), av, bf(), bv, test()
  - ILB: af(), av, test().
  All members are non-static.
  Access them by simple name from ILB.test(). Also discriminate using this, O.this, Mid.this, ILB.this.
  See $8.1.3 for the precise semantics of inner classes.

57. Local class, inside instance method, inside another local class,
  inside a top-level class. Class members:
  - O: af(), av, bf(), bv, cf(), cv, test().
  - Mid: af(), av, bf(), bv, test()
  - ILB: af(), av, test().
  All members are non-static.
  Access them by simple name from ILB.test(). Also discriminate using this, O.this, Mid.this, ILB.this.
  See $8.1.3 for the precise semantics of inner classes.

  Part 6. Multiple local classes.

61. Inside the same method, two local classes implementing I. I have method f().
  Call the test on both of them, using the same local var, and observe the difference.

  Part 7. Instantiation of local classes in the context of hiding.
71. Local class instantiating another local class from the same enclosing block.
72. Local class instantiating two local classes defined in nested enclosing blocks.
73. Instantiating a local class that shadows an inner class of the enclosing class.
  Instantiate and print the said class before the definition of the Local,
  in the scope of the local class, and after it.
74. Inner class A. After it - local class LA. After - local class A. LA prints A.
  Instantiate LA in the scope of local A, and outside the scope. In both cases it should
  refer to the local A.
75. Local class LA instantiating its own inner class A , that shadows a local class of the enclosing block.
76. An inner class A, two blocks each having a local class A.
  Instantiate and print A inside each block and between blocks.
77. Class O. Local classes A, Local, in the same block. Inside Local - local class DeepLocal.
  Instantiate A from DeepLocal, first unqualified, then qualified with a different enclosing O.
  Print both A, that should print a parameter from their encloser.

  Part 8. Deriving from local classes in the context of hiding.
81. Local class LB1 derived from a local class A that shadows an inner class A of the enclosing class.
  LB2 derived from A after the scope of local A, is thus derived from inner class A.
82. Class O. Local classes A, Local, in the same block. Inside Local - local class DeepLocal derived from A.
  Instantiate two DeepLocals, for different enclosing objects O.
  Print a parameter of O from both DeepLocal and its base class.

  Part 9. Misc.

91. Class O. Local classes A, Local, in the same block. Inside Local - local class DeepLocal derived from A.
  Instantiate one DeepLocal. Fields inside classes:
  O: a,b
  Local: a,c
  A: a,d
  DeepLocal: a,e
  Print all 8 fields from DeepLocal, using qualified this/super where needed.

92. Class O, method test(). Inside test() local classes LA.
  Class LA defines the inner class InnerOfLA.
  From LA, instantiate two instances of InnerOfLA - one without qualifier, another qualified with a newly
    created instance of LA.
  From InnerOfLA print a field from the enclosing LA.

93. Local class derived from another class with static fields. Call the fields qualified with
  the local class name.

94. Test that a local class may have the same name as a variable/field in the same scope.
  Three local classes. One have the same name as a local var, other - as a field, third - as a method.
  Define variables of type all three, instantiate and print them.
  Also print the local var, field and method, accessing them by simple name.
  All local classes have a no-arg traced constructor.

Implementation of enclosing local env. To test:
1.ok. Own fields should have higher priority than enclosing locals.
  Already present: test 46.
2. Base class fields should have higher priority than enclosing locals.
3. Static base class fields should have higher priority than enclosing locals.
4. Inner of local: Ability to accesses vars from enclosing local env of the enclosing Local.
5. Inner of local: Fields of Local should have higher priority than enclosing local vars.
6. Inner of local: Fields inherited by Local should have higher priority than enclosing local vars.
7. Inner of local: Static fields inherited by Local should have higher priority than enclosing local vars.
8. Outer local vars are accessible inside the constructor.
9. Class declared in a place where "a" have one val, instantiated where "a" have another val,
  but in both places a is a local var. Check the difference.
10. Base class and derived class with different local environments. Same outer local var
  referred in base and derived of the same object should yield different result.
