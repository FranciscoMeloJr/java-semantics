JLS: $15.9.5, although this chapter is quite terse and have little relevance to programmer's point of view.

  Part 1. Anonymous classes and the immediate enclosing class.

11. An anonymous class implementing an interface with method test(). Also have an own method and field,
  accessed by test().
12. Anonymous class accessing fields and methods of the enclosing class by simple name.
13. Anonymous class calling a superclass constructor with parameters.

  Part 2. Anonymous class whose base class is static inner, but not instance inner.

21. Base class is a static inner class, traced constructor with no args.
22. Base class is a local class in a static method, traced constructor with no args.

  Part 3. Anonymous class and superclass constructor.

31. Base class is inner class from another lexical hierarchy, have a traced constructor with no arguments.
  Anonymous class have a constructor with one argument - the qualifier of the base class.
  Anonymous class's test() calls super.test() that prints something from its enclosing class.
32.Base class is inner class from the same lexical hierarchy, have traced a constructor with two arguments.
  Anonymous class have a constructor with three arguments - one for qualifier, two for the base class args.
  Anonymous class's test() calls super.test() that prints something from its enclosing class.
33. Base class is inner class from the same lexical hierarchy, have traced a constructor with two arguments.
  Anonymous class have a constructor with two arguments, one for each base argument.
  Anonymous class's test() calls super.test() that prints something from its enclosing class.
  Instantiate two anonymous derived from inner, for two enclosing objects: this and another one.
34. Base class is a local class in instance context, have traced a constructor with two arguments.
  Anonymous class have a constructor with two arguments - one for each base class arg.
  Anonymous class's test() calls super.test() that prints something from its enclosing class.
  The enclosing object is other than O.this.
35. Superclass have two constructors - one-arg and two-args one. Create anonymous classes for both.
  Traced constructors, nothing more.

  Part 4. Anonymous class and the enclosing block.

41. Anonymous class accessing:
  - a field of the enclosing class
  - a local var that shadows a field of the enclosing class
  - its own field, that shadows a local var of the enclosing block
  - a constant from the base interface

  Part 5. Three-level nesting.

51. Anonymous class inside another anonymous. MidAnon implements I1, DeepAnon implements I2.
  Return I2 implementation outside MidAnon. From DeepAnon access local vars and fields
  of DeepAnon, method enclosing DeepAnon, MidAnon, method enclosing MidAnon, and the top level class.
  Each var hides a bunch of same-named vars from upper levels.

52. Inner class of an anonymous class. Anonymous implements I1, its inner implements I2.
  Return I2 implementation outside anonymous. From inner access local vars and fields
  of inner, method enclosing inner, anonymous, method enclosing anonymous, and the top level class.
  Each var hides a bunch of same-named vars from upper levels.

  Part 6. Multiple anonymous classes.

61. Inside the same method, two anonymous classes implementing I. I have method test().
  Call the test of both of them, using the same local var, and observe the difference.

  Part 7. Anonymous classes in places where local classes are not possible.

71. Anonymous class implementing an interface as static field initializer. Access other static fields.
72. Anonymous class implementing an interface as instance field initializer. Access other instance and static fields.
73. Anonymous class inside superclass constructor invocation expression. Access parameters and static fields.
74. Anonymous class inside for first clause - initializer, the clause is expression.
75. Anonymous class inside for first clause - initializer, the clause is expression declaration.
