Test plan for arrays.

Part 1. Arrays of various types.

1. Array allocation by new, value assignment and value read:
  - int
  - short
  - String
  - Object
  - RuntimeException

Part 2. Array allocation.

2. Array allocation. Multidim array allocation in one piece:
  - three dims, type int.

3. Array allocation. Various array dims:
  - positive
  - zero
  - [positive][zero]
  - [zero][positive]

4. Array allocation, NegativeArraySizeException:
  - [negative]
  - [positive][negative]
  - [zero][negative] ??

5. Array variable, [] as part of the declarator (compatibility with C):
  - int[] b[]. Assign, access.

Part 3. Array access.

6. Normal access:
  - one dim, constant index
  - two dims, constant index
  - one dim, var index
  - two dims, var index

7. Various index types: int, short, byte, char (true literal).

8. ArrayOutOfBoundsException.
  - one dim, negative, read & write.
  - one dim, = length
  - one dim > length
  - one dim = 0, index = 0.
  - two dims, second dim negative
  - two dims, second dim = length
  - two dims, second dim > length

9. Order of dims evaluation:
  - two dims, first index is 2/0, second index is negative.
    Throws ArithmeticException.

Part 4. Array assignment (no conversion).

10. Assign among arrays.
  - two one dim arrays, assign one to another. Test an element in second array.
  Change an element in first. Element should be changed in both arrays.

11. Assign among arrays.
  - two one dim arrays, both initialized, assign one to another.
    Initialization value of assigned array is rewritten.

12. Assign among arrays. Multidim arrays.
  - A[][]. B[]. A[1] = B. Test.
  - A[][][]. B[][], A[1] = B. Test final value.
  - A[1][1] = B[1]. Test

Part 5. Array members.

13. array.length
  - one dim, positive
  - one dim, zero
  - two dims, positive
  - two dims, zero

14. array.clone
  - one dim, array of ints, length = 0, test for ==
  - two dims, array of ints, [zero][zero], test for ==
  - int[3], test for ==
  - int[2][0], test for ==
  - int[2][2], test for ==
  - Object[2] - values are strings, test for ==

Part 6. Arrays assignment compatibility and ArrayStoreException.

15. Compatible arrays.
  - RuntimeException[] vre = NullPointerException[]. assign. read.
  - NPE[] b = (RE[]) vre. Cast to the opposite direction should work.

16. ArrayStoreException.
  - Example from JLS $10.10

Part 7 Array initializer.

Subpart 7.1: Array initializer in array creation expression:
  like new int[]{1,2,3}

17. One dim int[] = new int[]{1,3,7}
18. Two dim ints = new int[][]{{1,2}, null}
19. One dim string = new String[]{"abc", "d"+"e"}
20. Left-to-right eval: {++i, ++i, ++i}
21. Array assign compatibility test:
  new Object[][]{new RuntimeException[] {new RuntimeException("re")} }

Subpart 7.2: Array initializer as part of array var declaration:

22. One dim int[] = {1,3,7}
23. Two dim ints = {{1,2}, null}
24. One dim string = {"abc", "d"+"e"}
25. Left-to-right eval: {++i, ++i, ++i}

Part 8. Array element default value.

26. Default value of primitive types:
  byte[], short[], int[], long[], char[], boolean[],
27. Default value of refs:
  object[], string[], RuntimeExeption[], Object[][].

todo for later:
1. JLS $10.1: Array types: interface, abstract class.
2. JLS $10.8: Class objects for arrays.
