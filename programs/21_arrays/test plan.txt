Test plan for arrays.

Part 1. Arrays of various types.

1. Array allocation by new, value assignment and value read:
  - int
  - short
  - String
  - Object
  - RuntimeException

Part 2. Array allocation.

2. Array allocation. Multidim array allocation in one piece:
  - three dims, type int.

3. Array allocation. Various array dims:
  - positive
  - zero
  - [positive][zero]
  - [zero][positive]

4. Array allocation, NegativeArraySizeException:
  - [negative]
  - [positive][negative]
  - [zero][negative]

5. Various dim expression types: int, short, byte, char (true literal).
  For each a read and a write.

6. Order of dims during allocation:
  - [++i][++i][++i]
  - [negative][2/0] - should throw ArithmeticException.

7. Array variable, [] as part of the declarator (compatibility with C):
  - int[] b[]. Assign, access.

Part 3. Array access.

canceled. Normal access:
  - one dim, constant index
  - two dims, constant index
  - one dim, var index
  - two dims, var index
  Already covered by previous tests.

8. Various index types: int, short, byte, char (true literal).

9. ArrayOutOfBoundsException.
  - one dim, negative, read & write.
  - one dim, = length
  - one dim > length
  - one dim = 0, index = 0.
  - two dims, second dim negative
  - two dims, second dim = length
  - two dims, second dim > length

10. Array access evaluation order:
  - [++i][++i][++i]
  - [2/0][negative] - throws ArithmeticException.

11. Array access null.
  - null[2] - throws NullPointerException. Read, write.

Part 4. Array assignment (no conversion).

12. Assign among arrays.
  - two one dim arrays, assign one to another. Test an element in the second array.
  Change an element in the first. Element should be changed in both arrays.

13. Assign among arrays.
  - two one dim arrays, both initialized, assign one to another.
    Initialization value of assigned array is rewritten.

14. Assign among arrays. Multidim arrays.
  - A[][]. B[]. A[1] = B. Test.
  - A[][][]. B[][], A[1] = B. Test final value.
  - A[1][1] = B[1]. Test

Part 5. Array members.

15. array.length
  - one dim, positive
  - one dim, zero
  - two dims, positive
  - two dims, second dim assigned, positive
  - two dims, second dim assigned, zero

16. array.clone
  - one dim, array of ints, length = 0, full test
  - two dims, array of ints, [zero][zero], full test
  - int[3], full test
  - int[2][0], full test
  - int[2][2], full test
  - Object[2] - values are string, RuntimeException, full test
  By full test we mean test for ==, and full test on all elements
    (possible recursively).

Part 6. Arrays assignment compatibility and ArrayStoreException.

17. Compatible arrays assignment.
  - RuntimeException[] vre = NullPointerException[]. assign. read.

18. ArrayStoreException.
  - Example from JLS $10.10

19. Array cast.
  - cast ok: RuntimeException[] -> NPE[], object is NPE[]
    Print content after cast.
  - ClassCastException: RuntimeException[] -> NPE[], object is RuntimeException[].

Part 7 Array initializer.

Subpart 7.1: Array initializer in array creation expression:
  like new int[]{1,2,3}

20. One dim int[] = new int[]{1,3,7}
21. Two dim ints = new int[][]{{1,2}, {3}, null}
22. One dim string = new String[]{"abc", "d"+"e"}
23. Left-to-right eval: {i++,i++,i++}
24. Array assign compatibility test:
  new Object[][]{new RuntimeException[] {new RuntimeException("re")} }
25. Inner array type:
  m = new Object[][]{ {new RuntimeException("re")} }
  (RuntimeException[])m[0] - throws ClassCastException

Subpart 7.2: Array initializer as part of array var declaration:

26. One dim int[] = {1,3,7}
27. Two dim ints = {{1,2}, new int[]{3}, null}

Part 8. Array element default value.

28. Default value of primitive types:
  byte[], short[], int[], long[], char[], boolean[].
29. Default value of refs:
  Object[], String[], RuntimeException[], Object[][].

todo for later:
1. JLS $10.1: Array types: interface, abstract class.
2. JLS $10.8: Class objects for arrays.
