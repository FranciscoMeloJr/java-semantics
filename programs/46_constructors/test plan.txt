Testing class initialization sequence
  - the last feature remaining for full support of non-static semantics of classes.

  Part 3 constructors
5. call to superclass constructor.
6. call to same-class constructor via this keyword.
7. default constructor.
8. constructor overloading / access modes. (one test for overloading, probably one for access modes.)
  (Both for this(); and super();)

51. Two classes, implicit call of no-args superclass constructor.
52. Two classes, explicit call of no-args superclass constructor.
53. Two classes, call of superclass constructor with arguments.
54. Two classes, superclass constructor call arguments are expressions using this constructor arguments,
  also calling methods that print something to the console.
55. Two classes with initializer, field with initializer and constructor.
  Trace execution within initializer, fields init, constructor
  and super call expression. Fields and constructor arguments all have different names.
56. Two classes with initializer, field with initializer and constructor.
  Trace execution within initializer, fields init, constructor.
  and super call expression. Fields and constructor arguments have the same name.
  Fields in derived class hide fields in the base class.
57. Argument to super() throws an exception. Test that instance initializers
  are not executed on neither base nor derived class. Do this by printing
  something in the instance initializers.

61. A class with three constructors. Chain all of them, explicit call to no-args super() at last.
Instantiate three objects, using each constructor as primary one. Trace calls
both in the constructor arguments and in the constructor body.

71. Class A with an instance initializer with a trace. No constructor.
  Call it explicitly, from subclass implicitly, from subclass explicitly.

81. Standart constructor overloading.
  decl: A: A(), A(short), A(long).
  calls: arguments: (), (short), (int)
82. Class A. Multiple constructors with one arg - different int types.
  Call them by:
  - instantiating A
  - instantiating B < A, by super().
  - instantiating A, by this() - constructors should be chained, with explicit cast to most
    specific type.
83. super() access modes.
  - class a.A with four constructors:
    - private A(byte)
    - package A(short)
    - protected A(int)
    - public A(long)
  - class a.B < A. Instantiate with super(byte).
  - class b.C < A. Instantiate with super(byte).
  - class a.Test1. instantiate A with byte.
  - class b.Test2. instantiate A with byte.

Note:
  An attempt of a constructor to invoke itself recursively results in a compile-time error.

91. Name collisions between constructor/method/field.
  Class A have:
  - a constructor A()
  - a method int A()
  - a field int A.
  Test that all three may be unambiguously referred from both inside and outside the class.

