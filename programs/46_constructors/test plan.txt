Testing class initialization sequence
  - the last feature remaining for full support of non-static semantics of classes.

  Part 3 constructors
5. call to superclass constructor.
6. call to same-class constructor via this keyword.
7. default constructor.
8. constructor overloading / access modes. (one test for overloading, probably one for access modes.)
  (Both for this(); and super();)

51. Two classes, implicit call of no-args superclass constructor.
52. Two classes, call of superclass constructor with arguments.
53. Two classes, superclass constructor call arguments are expressions using this class arguments,
  also calling methods that print something to the console.

61. A class with three constructors. Chain all of them, implicit call to no-args super() at last.
Instantiate three objects, using each constructor as primary one. Trace calls
both in the constructor arguments and in the constructor body.

71. Class A with an instance initializer with a trace. No-args constructor.
  Call it explicitly, from subclass explicitly, from subclass implicitly.

72. Class A with an instance initializer with a trace. No constructors.
  Call no-args constructor explicitly, from subclass explicitly, from subclass implicitly.

81. Standart constructor overloading. Old test from method overloading suite.
82. Class A. Multiple constructors with one arg - different int types.
  Call them by:
  - instantiating A
  - instantiating B < A, by super().
  - instantiating A, by this() - constructors should be chained, with explicit cast to most
    specific type.
83. Test that this() overloading don't cause circular calls.
  constructor(int), constructor(long), this(int) calls this(...), without explicit cast. this(long)
  should be called.
84. super() access modes.
  - class a.A with four constructors:
    - private A(byte)
    - package A(short)
    - protected A(int)
    - public A(long)
  - class a.B < A. Instantiate with byte.
  - class b.C < A. Instantiate with byte.
  - class a.Test1. instantiate A with byte.
  - class b.Test2. instantiate A with byte.
