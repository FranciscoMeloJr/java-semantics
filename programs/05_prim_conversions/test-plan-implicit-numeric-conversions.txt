3 cases where implicit numeric conversion occur, JLS $5:
1. Assignment conversion:
  - widening primitive conv,
  - narrowing constant exp. numeric conv.
2. Method invocation conv:
  - widening primitive conv
3. numeric promotion:
  - widening primitive conv
4. No conversion: ++/-- operators.
5. No conversion - compound assignment operator.
According to JLS $15.26.2:
  A compound assignment expression of the form E1 op= E2is equivalent to
  E1=(T)((E1) op (E2)), where T is the type of E1, except that E1 is evaluated
  only once.

Unary numeric promotion is performed on:
  - dimensions of array creation expression
  - index of array acces expression
  - operand of unary +/-/~
  - each operand, separately, of >>,<<,>>>.
  Thus, int >> long => int.

  Binary numeric promotion is applied on:
   * / % + - < <= > >= == != & ^ |
   in certain cases: ? : .
   In that case the type of ?: result is the
   narrowest type which fits operands 2 and 3,
   which may be any of byte, short, int, long, char.
   There are 3 general cases:
    - if op 2 and 3 have the type T => result is T,
      any of byte,short,int,long,char.
    - 2 vars of diff type to short,int,long.
    - one var and one constant to byte,short,char,int,long.

Test plan.
1. Assign - widening primitive conv:
  byte to byte, short, int, long
  short to short, int, long
  int to int, long
  long to long
  char to int, long, char
2. Assign - narrowing constant int conv:
  int to byte, short, int, long, char
3. Primitive var init - each var receive a value representable only by that type or wider.
4. Method invocation - widening primitive conv:
  byte to byte, short, int, long
  short to short, int, long
  int int, long
  long to long
  char to int, long, char
5. Unary numeric promotion:
  short in +/-/~
  short_short in >>, <<, >>>
  long_short in >>, <<, >>>
  short_long in >>, <<, >>>
  Result fitting in promoted type only, where possible.
6. Unary promotion: array cration, array access.
7. Binary promotion: all operators short and short.
  Specifically the following operators: * / % + - < <= > >= == != & ^ |
  Where possible,the result should not fit in short range.
8. Binary promotion:
  byte * byte,
  short * short,
  char * char,
  byte * short, short * byte,
  short * int, int * short,
  short * long, long * short,
  int * long, long * int.
  All results representable in no less than promoted type.

9. Binary promotion: ?: operator:
case 1:
  byte+byte->byte
  short_short->short
  int_int->int
  long_long->long
  char_char->char

case 2:
  byte_short->short
  byte_int->int
  byte_long->long
  char_short->int
  short_byte->short

case 3:
  byte_byteconst->byte
  short_shortconst->short
  int_intconst->int
  long_longconst->long
  char_charconst->char
  byteconst_byte->byte

10. Byte,short,char increment and decrement:
  ++short, --short, short++, short--, both without and with overflow.
  byte--, char--.

  JLS is ambiguously describing this operators for type short, byte, char.
  According to $4.2.2 ++/-- should be prohibited for those types.
  According to $15.15.1 ++/-- may be applied to any nymeric type var,
    thus is permitted.

11. Compound assignment with overflow:
  short op= int, all operators.
  Operators are: += -= *= /= &= |= ^= %= <<= >>= >>>=

12. Compound assignment with overflow, selections:
  byte += int
  short += int
  int += int
  long += int
  char += int
