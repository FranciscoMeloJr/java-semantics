Test plan for non-static (true) inner classes.

Inner classes cannot have non-constant static fields, methods, interfaces or other inner classes.
  Only instance members and constant static fields are allowed. Thus, an inner class name
  cannot be used as a qualifier.

Part 1. Inner class basics - accessible names.

11. O, O.A. Instantiate inner class from the outer class, access members: v, f().
12. O, O.A. Instantiate inner class from the outer class. Inner class constructor accesses its members:
  field, method.
13. O, O.A. Instantiate inner class from the outer class. Inner class constructor accesses static members of its outer class:
  field, method.
14. O, O.A. Instantiate inner class O.A, from the outer class O. Call inner class method test().
  test() accesses instance members of the enclosing class: v, f().
  Instantiate O twice, each O will instantiate a different A, producing different output values.
15. O, O.A. Instantiate inner class from the outer class. Call inner class method test().
  test() instantiates other inner classes of the enclosing class: static class O.B, instance class O.C.
  All referred by simple name.
16. O, O.A. Instantiate inner class from main, using a qualified constructor call.
  Inner class method test() calls both its members and instance members of the enclosing class.
17. O, O.A. Instantiate inner class from the outer class, using a qualified constructor call
  with qualifier being other than "this", and also with qualifier this.
  Inner class method test() calls both its members and instance members of the enclosing class.
  Check that outer members belong to the proper enclosing instance.

Part 2. Hierarchies involving outer classes.
21. Classes S, O < S, O.A. Access members of S from A.
22. Classes S, S.A, O < S, O.B. Instantiate A from B by simple name. Access members of A from B.
  Members of A access the members of S.

Part 3. Hierarchies involving inner classes.
301. Classes S, O, O.A < S. Access members of S, O, A from A.
302. Classes S, O, O.A < S, I1, I2. Cast the object of type A to S, I1, I2, access the respective members.
  S, I1, I2 should have each a method overwritten in O.A.
303. Classes O, O.A, O.B < O.A. Instantiate B from O simple.
  Also instantiate B from a static context, using a qualifier object of type O.
304. Classes O, O.A, B < O.A. Instantiate B from static context.
  B should have two constructors: One calling with no arguments, calling the second one with this(new O()),
  the second one with an argument O, calling o.super() - a qualified superclass constructor call. Use both constructors.
305. Superposition of nesting and inheritance. Classes O, O.A < O. In any case the enclosing
  instance of A and the base instance will be different instances.
  Instantiate a from O and from a static context.
  Inside A, discriminate between outer O and base O by using O.this, simple this and super as qualifier,
  also unqualified calls.
306. Triangle hierarchy: S, O < S, O.A < S. In any case the enclosing instance of A and the base instance
  will be different instances. Instantiate A from O, from static context via a qualifier of type O.
  Inside A, discriminate between outer S and base S by using S.this, this, super qualifier, also unqualified calls.
307. Square hierarchy. S, A.S, O < S, O.B < A.S.
  Instantiate B from O, or from static context. In the first case enclosing instance of B and A will be the same,
  in the second - different. (Use two different constructors for B).
  In any case, constructor of B should call a qualified superclass constructor.
  (Try the opposite and confirm the compile-time error).
  Inside B, discriminate between outer S and base S by using no qualifier or indirection methods from A.
308. Base and derived, both inner to unrelated top-level classes.
  O1, O2, O2.B < O1.A. Instantiate O2.B, with constructor arg of type O1. Print a field from O2, A,B.
309. Twisted square hierarchy. S, S.A < O.B, O < S, O.B.
  Instantiate S.A with both the same outer instance as O.B or a different instance.
  For this, use two constructors for A - one with argument O, for the base class,
    and other with no argument. Argument for the base class will be S.this.
  Inside B, discriminate between outer S and base S by using no qualifier or indirection methods from A.
310. Three-level branched nesting with inheritance:
  - Outer
    - Mid1
    - Mid2
      - Inner < Mid1. Inner constructor doesn't need to create/access
    any extra instances. It could be left implicit.
    Testing transitive search for appropriate outer class inside constructor call expression.
    Instantiate two objects Inner, on two distinct objects Outer.
    - test() of each class will print its immediate outer as well as base class.
    - Outer.test() will print its id.
311. Superposition of nesting and inheritance creating ambiguity:
  - Outer:
    - Mid1
    - Mid2 < Outer
      - Inner < Mid1. Inner constructor should be default.
      Which instance of Outer will it choose as enclosing instance for Mid1?
      The outermost Outer or Mid2?
    Instantiate two objects Inner, on two distinct objects Outer.
    - test() of each class will print its immediate outer as well as base class.
    - Outer.test() will print its id.

Part 4. Member hiding.
41. Field and method hiding. O, O.A, O.A.B. O.v, O.f(), A.v, A.f(), B.v, B.f()
  From B, call v, f() by simple name, by using this, by using B.this, A.this, O.this.
42. Classes O, S, O.A < S. All three have the field v, method f().
  From A call: v, f(), this.v, this.f(), super.v, super.f(), O.this.v, O.this.f(), A.this.v, A.this.f().

43. Qualified super as qualifier himself.
  Classes O3 < O2 < O1, O3.C < A. Of them, classes O3, O1, C, A all have v, f().
  Call from C: v(write), v(read), f() using qualifiers:
  - <no qualifier>
  - this
  - super
  - O3.this
  - O3.super

44. Various qualifiers to instantiate inner classes.
  Classes O3 < O2 < O1, O3.C < A. Of them, classes O3, O1, C, A all have the inner class Inner.
  Instantiate Inner from C, using qualifiers:
  - <no qualifier>
  - this
  - O3.this
  We cannot use super or O3.super as qualifier, because super is not a Primary expression, and cannot be used
  as qualifier for new instance creation.

Part 5. Packages, access modes.

51. Inner class access modes for inherited methods. (Similar to static inner test 108)
  p1.A:
    - private f(byte)
    - package f(short)
    - protected f(int)
    - public f(long)
  p1.B.InnerB:
    - private f(byte)
    - package f(short)
    - protected f(int)
    - public f(long)
  Test classes:
    - p1.A.Inner1      < p1.A
    - p1.B.Inner2      < p1.B.InnerB
    - p1.TestP1.Inner3 < p1.A
    - p1.TestP1.Inner4 < p1.B.InnerB
    - TestDef.Inner5   < p1.A
    - TestDef.Inner6   < p1.B.InnerB
  Call f(byte) from:
    - Inner1, ... Inner6
    - from main on targets Inner1, ... Inner6.

52. Three-level class nesting. (Similar to static inner 701)
  Classes:
    - p1.A
    - p1.A.Mid
    - p1.A.Mid.Inner
    - p1.A.Test
  .class the following names:
    - from main (imports p1):
      - p1.A.Mid.Inner
      - A.Mid.Inner
    - from p1.A:
      - p1.A.Mid.Inner
      - A.Mid.Inner
      - Mid.Inner
      - Inner
    - from p1.A.Test:
      - p1.A.Mid.Inner
      - A.Mid.Inner
      - Mid.Inner
      - Inner
    - from p1.A.Mid:
      - p1.A.Mid.Inner
      - A.Mid.Inner
      - Mid.Inner
      - Inner
    - from p1.A.Mid.Inner:
      - p1.A.Mid.Inner
      - A.Mid.Inner
      - Mid.Inner
      - Inner
      - A
      - Mid
      - Test

Part 6. Misc.
61. Inner class with instance initializer.
  O, A.O, O.v, A.<instance init>. Instance init is traced, accesses v.
  Instantiate A from main.

62. Qualified new instance creation execution order. Call a qualified constructor with
  three arguments. qualifier and all three arguments should be traced.
  
63. Inner class with alternate constructor call.
  Referencing fields of the outer class in the alternate constructor call of the inner class.

Part 7. Interplay of static and non-static inner members. (If any).

71. Top-level class O, static inner O.Mid, instance inner O.Mid.Inner.
  From Inner call by simple name:
  - inner field,
  - inner method
  - Mid instance field
  - Mid instance method
  - Mid static field
  - Mid static method
  - O static field
  - O static method
  Instantiate the class Inner from O: new Mid().new Inner()

72. Interface I, "implicitly" static inner I.Mid (e.g. without keyword static), instance inner I.Mid.Inner.
  Class A < I.
  From Inner call by simple name:
  - inner field,
  - inner method
  - Mid instance field
  - Mid instance method
  - Mid static field
  - Mid static method
  - I static field
  Instantiate the class Inner from A: new Mid().new Inner()
