Constants will have an approximate implementation, mostly to pass the example from JBook exposing them.    See the comments in the semantics for details on the level of support for constants.    Tests:1. Class with a constant initialized with an int value and static initializer printing something.  Access the constant. Static init should not be triggered.  Access a non-constant static field. Static init should be triggered. Access the constant again.2. Interface with a constant initialized with an int value and a traced static initialization.  Access the constant. Static init should not be triggered.  Access a non-constant static field. Static init should be triggered.3. Priority of fields is no higher than that of constants. The test from JBook:  Class B < A.  A: field x, static init  B: constant x, static init  Main: access B.x.4. Priority of constants is no higher than that of static fields.  Class B < A.  A: constant x, static init  B: field x, static init  Main: access B.x.5. Constants are inherited from the base class.  Class B < A.  A: constant x, static init  B: static init  Main: access B.x.