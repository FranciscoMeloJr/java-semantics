  Testing static expression type for all possible expressions.

All tests follow this pattern:
  main() {
    println(f(true ? ExprTypeA : ExprTypeB))
    println(f(false ? ExprTypeA : ExprTypeB))
  }
  f(TypeA) {...}
  f(TypeB) {...}

  The type of conditional expression should be TypeB, but the chosen value shoudl be ExprTypeA. This way
we test that TypeB is correctly inferred although the expression is not evaluated at runtime.

  Operands 2 and 3 of ?: should always contain side effects. Usually in the form of some method call,
in the case when the side effect don't occur naturally, such as for ++ operator.
  (At least one operand should have a side effect, when the other one is a constant.)

    Tests:

01. A
  A : null . f(Object), f(A)

02. new class expression:
  B < A,
  new B() : new A()

03. new array expression:
  B < A,
  new B[1] : new A[2]
  f(): print array length

04. Field access expression
C{ int x; long y;}
C.x : C.y

05. Method invocation expression
  B < A
  fB() : fA()
  B fB(){}
  A fA(){}
  Methods with side effects

06. Array access expression
  B < A
  B[] vb; A[] va;
  vb[0] : va[0]

07. Postfix  ++ / --
  int b = 1; long a = 10;
  b++ : a++
  b-- : a--
  Print the values after each operator.

08. Prefix ++ / --
  int b = 1; long a = 10;
  ++b : ++a
  --b : --a
  Print the values after each operator.

09. Unary  + / -
  int b = 1; long a = 10;
  +b : +a
  -b : -a

10. ~
  int b = 1; long a = 10;
  ~b : ~a

11. !
  boolean b = false, a = true;
  !b : !a

12. Cast primitive
  long a = 10;
  (byte)a : (int)a

13. Cast reference
  B < A
  Object o1 = new B();
  Object o2 = new A();
  (B) o1 : (A) o2

14. Multiplicative operators: * / %
  int b = 10; long a = 100;
  b * b : a * b
  b / b : a / b
  b % b : a % b

15. Additive numeric: +  -
  int b = 1; long a = 10;
  b + b : a + b
  b - b : a - b

16. String additive
  B < A
  (Object)A : "abc " + A

17. Shift operators: << >> >>>
  int b = 10; long a = 100;
  b << 1 : a << 1
  b >> 1 : a >> 1
  b >>> 1 : a >>> 1

18. Relational numeric operators: < > <= >=
  int b = 1; long a = 10;
  b < b : a < b
  b > b : a > b
  b <= b : a <= b
  b >= b : a >= b

19. instanceof
  B < A
  Object o = new A
  o instanceof A : o instanceof B

20. Equality: numeric
  int b = 1; long a = 10;
  b == b : a == b
  b != b : a != b

21. Equality: boolean
  boolean b = true; boolean a = false;
  b == b : a == b
  b != b : a != b

22. Equality: reference
  B < A
  B b = new B(); A a = new A();
  b == b : a == b
  b != b : a != b

23. Bitwise operators: & ^ |
  int b = 1; long a = 10;
  b & b : a & b
  b ^ b : a ^ b
  b | b : a | b

24. Logical operators: & ^ |
  boolean b = true; boolean a = false;
  b & b : a & b
  b ^ b : a ^ b
  b | b : a | b

25. Conditional and/or: && ||
  boolean fTrue() {} boolean fFalse() {} - with side effects
  fTrue() && fFalse() : fTrue() && fTrue()
  fTrue() || fFalse() : fTrue() || fTrue()

26. Conditional ternary operator ?:
  B < A
  boolean fTrue() {} boolean fFalse() {} - with side effects
  fTrue() ? A : A : fFalse() ? B : B

27. Assignment operator simple
  int b = 1; long a = 10;
  b = 2 : a = 20
  Print a, b after assign.

28. Assignment: some compound
  int b = 1; long a = 10;
  b += 200 : a += 200
  b -= 2 : a -= 2
  Print a, b after each assign.

29. Composite numeric expression.
  1 + (10 + 100) : 1 + (10 + 100L)
