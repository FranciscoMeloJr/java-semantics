Test plan for integer literals:
01. Decimal int:
  -zero
  -positive
  - negative (unary minus applied  correctly),
  - smallest negative (proof that normalization don't happen before application of unary minus)
  - sum of two large positives that generates overflow - proof that literals are actually of type int.

011. Decimal long:
  - zero
  - positive
  - large positive with "l"
  - large positive with "L"
  - smallest negative (proof that normalization don't happen before application of unary minus)
  - sum of same numbers as the last test for decimal int,
  without overflow - proof that literals are of type long.

02. Hex int:
  - zero
  - positive starting with 0x , lowercase characters.
  - positive starting with 0X , uppercase characters.
  - negative
  - sum of two large positives, overflow.

02. Hex long:
  - zero
  - large positive, lowercase characters, ends with "L"
  - large positive, uppercase characters, ends with "l"
  - large positive, that would be negative for int.
  - negative
  - sum of same numbers as in last test for hex int,
  without overflow.

03. Octal int:
  - zero,
  - positive,
  - negative
  - sum of two large positives, overflow.

03. Octal long:
  - zero
  - positive (would be negative if int)
  - negative
  - sum of two "would be overflow if int" numbers,
  no overflow here.
