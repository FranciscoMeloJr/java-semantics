    Testing compile-time type of a conditional expression.

JLS1 $15.24:

The type of a conditional expression is determined as follows:
• If the second and third operands have the same type (which may be the null
    type), then that is the type of the conditional expression.
• Otherwise, if the second and third operands have numeric type, then there are
    several cases:
  - If one of the operands is of type byte and the other is of type short, then
      the type of the conditional expression is short.
  - If one of the operands is of type T where T is byte, short, or char, and the
      other operand is a constant expression of type int whose value is represent-
      able in type T, then the type of the conditional expression is T.
  - Otherwise, binary numeric promotion (§5.6.2) is applied to the operand
      types, and the type of the conditional expression is the promoted type of the
      second and third operands.
• If one of the second and third operands is of the null type and the type of the
    other is a reference type, then the type of the conditional expression is that
    reference type.
• If the second and third operands are of different reference types, then it must
    be possible to convert one of the types to the other type (call this latter type T)
    by assignment conversion (§5.2); the type of the conditional expression is T.
    It is a compile-time error if neither type is assignment compatible with the
    other type.

We will test the conditional using method overloading. Overloaded method is called with
    an argument of form conditional expression. All conditional expressions will have
    first arg = true

1. Conditional of equal types.
  Pairs:
    - boolean boolean
    - int int
    - A A
    - I I
    - int[] int[]
  Function args: all mentioned pairs + Object.

2. Conditional of numeric types.
  Pairs: all 5*5 pairs of integer numeric types.
  Function args: all numeric types

3. Conditional with one type null.
  Pairs:
    - A null
    - null A
    - null I
    - null int[]
  args: all types + Object

4. Conditional with both types null.
  Pairs: null null
  Args: Object, A

5. Conditional with two refs, one subtype of another.
  Types: A, I2 < I1. I3 < I2, B < A,
  Pairs:
    - A I1
    - I1 A
    - I2 I1
    - I2[] I1[]
    - A Object
    - I3 I1
    - I1 I3
    - B Object
    - Object B
    - B[] Object[]
  Args:
    - A, B, I1, I2, I3, I1[], I2[], B[], Object[], Object.


